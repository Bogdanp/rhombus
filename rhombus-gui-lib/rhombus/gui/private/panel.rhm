#lang rhombus/static/and_meta
import:
  lib("racket/gui/easy.rkt")
  rhombus/draw/private/symbol_map.symbol_map_annot
  "view.rhm".View
  "view.rhm"!private.to_view
  "obs.rhm":
    expose:
      Obs
      ObsOrValue

export:
  HPanel
  VPanel
  GroupPanel
  TabsPanel

symbol_map_annot PanelStyle convert_style:
  { deleted: deleted,
    border: border,
    vscroll: vscroll,
    hscroll: hscroll,
    auto_vscroll: #{auto-vscroll},
    auto_hscroll: #{auto-hscroll},
    hide_vscroll: #{hide-vscroll},
    hide_hscroll: #{hide-hscroll} }

defn.macro 'def_panel $name($arg :: $arg_annot ... => $convert, ...):
              ~easy: $easy_name
              $body
              ...':
  'class $name(private _handle):
     implements View
     override property handle: _handle

     constructor ($arg :: $arg_annot ..., ...,
                  ~alignment: alignment :: ObsOrValue.of(View.Alignment) = [#'center, #'center],
                  ~styles: style :: ObsOrValue.of(List.of($(name).Style)) = [],
                  ~is_enabled: is_enabled :: ObsOrValue.of(Boolean) = #true,
                  ~spacing: spacing :: ObsOrValue.of(View.SpacingInt) = 0,
                  ~margin: margin :: ObsOrValue.of(View.Margin) = [0, 0],
                  ~min_size: min_size :: ObsOrValue.of(View.Size) = [#false, #false],
                  ~stretch: stretch :: ObsOrValue.of(View.Stretch) = [#true, #true],
                  child :: ObsOrValue.of(View),
                  $'...'):
       super(easy . $easy_name($convert($arg), ...,
                               ~alignment: obs.unwrap_list(alignment, values),
                               ~#{enabled?}: obs.unwrap(is_enabled),
                               ~style: obs.unwrap_list(style, convert_style),
                               ~spacing: obs.unwrap(spacing),
                               ~margin: obs.unwrap_list(margin, values),
                               ~#{min-size}: obs.unwrap_list(min_size, values),
                               ~stretch: obs.unwrap_list(stretch, values),
                               to_view(child).handle,
                               $'...'))

     $body
     ...'

def_panel HPanel():
  ~easy: hpanel

  export:
    only_space annot:
      Style
    only_space namespace:
      rename: PanelStyle as Style

  annot.macro 'Style': 'PanelStyle'

def_panel VPanel():
  ~easy: vpanel

  export:
    only_space annot:
      Style
    only_space namespace:
      rename: PanelStyle as Style

  annot.macro 'Style': 'PanelStyle'

def_panel GroupPanel(label :: ObsOrValue.of(View.LabelString) => (obs.unwrap)):
  ~easy: group

  export:
    Style

  symbol_map_annot Style convert_style:
    { deleted: deleted }

class TabsPanel(private _handle, private _at_selection :: Obs):
  implements View
  override property handle: _handle

  constructor (choices :: ObsOrValue.of(List),
               ~choice_to_label: choice_to_label :: Any -> Any = values,
               ~choice_equal: choice_equal :: Function.of_arity(2) = fun (a, b): a == b,
               ~selection: selection :: ObsOrValue.of(Any) = #false,
               ~action: action :: maybe((TabsPanel.Action, List, maybe(Any)) -> Any) = #false,
               ~alignment: alignment :: ObsOrValue.of(View.Alignment) = [#'center, #'top],
               ~styles: style :: ObsOrValue.of(List.of(TabsPanel.Style)) = [],
               ~is_enabled: is_enabled :: ObsOrValue.of(Boolean) = #true,
               ~spacing: spacing :: ObsOrValue.of(View.SpacingInt) = 0,
               ~margin: margin :: ObsOrValue.of(View.Margin) = [0, 0],
               ~min_size: min_size :: ObsOrValue.of(View.Size) = [#false, #false],
               ~stretch: stretch :: ObsOrValue.of(View.Stretch) = [#true, #true],
               child :: ObsOrValue.of(View),
               ...):
    let at_selection = obs.to_obs(selection)
    let action:
      if action
      | fun(what, choices, selected):
          action(what, [& choices], selected)
      | fun(_, _, selected):
          at_selection.value := selected
    super(easy.tabs(obs.unwrap_list(choices, values),
                    action,
                    ~selection: obs.unwrap(at_selection),
                    ~#{choice->label}: choice_to_label,
                    ~#{choice=?}: choice_equal,
                    ~alignment: obs.unwrap_list(alignment, values),
                    ~#{enabled?}: obs.unwrap(is_enabled),
                    ~style: obs.unwrap_list(style, convert_style),
                    ~spacing: obs.unwrap(spacing),
                    ~margin: obs.unwrap_list(margin, values),
                    ~#{min-size}: obs.unwrap_list(min_size, values),
                    ~stretch: obs.unwrap_list(stretch, values),
                    to_view(child).handle,
                    ...),
          at_selection)

  property at_selection :: Obs:
    _at_selection.map(values)

  export:
    Style
    Action

  symbol_map_annot Style convert_style:
    { no_border: #{no-border},
      can_reorder: #{can-reorder},
      can_close: #{can-close},
      new_button: #{new-button},
      flat_portable: #{flat-portable},
      deleted: deleted }

  enum Action:
    select
    new
    close
    reorder
